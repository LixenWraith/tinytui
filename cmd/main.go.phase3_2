// main.go
package main

import (
	"github.com/LixenWraith/tinytui"
	"github.com/LixenWraith/tinytui/widgets"
	"log"
	"os"
)

func main() {
	// --- Basic Logging Setup ---
	logFile, err := os.OpenFile("debug.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	defer logFile.Close()
	log.SetOutput(logFile)
	log.Println("--- Application Starting ---")

	// --- Create Application ---
	app := tinytui.NewApplication()

	// --- Create Widgets ---

	// 1. A simple non-wrapping title
	titleText := widgets.NewText("TinyTUI Text & Status Bar Demo").
		SetStyle(tinytui.DefaultStyle.Foreground(tinytui.ColorAqua).Bold(true))

	// 2. A text widget with wrapping enabled
	longContent := "This is a longer piece of text designed to demonstrate the word wrapping feature. As you resize the window horizontally, this text should automatically reflow to fit within the available width of its container. Explicit newlines\nlike this one are also respected.\n\nVery long words like Supercalifragilisticexpialidocious might be broken if they exceed the line width."
	wrappingText := widgets.NewText(longContent).
		SetWrap(true).
		SetStyle(tinytui.DefaultStyle.Foreground(tinytui.ColorSilver))

	// 3. Create the Status Bar using a Horizontal FlexLayout
	statusBar := tinytui.NewFlexLayout(tinytui.Horizontal) // Horizontal layout

	// Style for separators
	separatorStyle := tinytui.DefaultStyle.Foreground(tinytui.ColorGray)
	// Style for keys
	keyStyle := tinytui.DefaultStyle.Foreground(tinytui.ColorYellow).Bold(true)
	// Style for descriptions
	descStyle := tinytui.DefaultStyle.Foreground(tinytui.ColorCyan)

	// Add sections to the status bar
	statusBar.AddChild(widgets.NewText("Ctrl+C:").SetStyle(keyStyle), 0, 0)   // Fixed width based on content
	statusBar.AddChild(widgets.NewText("Quit").SetStyle(descStyle), 0, 0)     // Fixed width based on content
	statusBar.AddChild(widgets.NewText(" | ").SetStyle(separatorStyle), 0, 0) // Fixed width separator
	statusBar.AddChild(widgets.NewText("Tab:").SetStyle(keyStyle), 0, 0)
	statusBar.AddChild(widgets.NewText("FocusNext").SetStyle(descStyle), 0, 0)
	statusBar.AddChild(widgets.NewText(" | ").SetStyle(separatorStyle), 0, 0)
	statusBar.AddChild(widgets.NewText("Sft+Tab:").SetStyle(keyStyle), 0, 0)
	statusBar.AddChild(widgets.NewText("FocusPrev").SetStyle(descStyle), 1, 0) // Proportional width 1 (takes remaining space)

	// Set a background for the whole status bar layout
	// statusBar.SetStyle(tinytui.DefaultStyle.Background(tinytui.ColorDarkBlue))

	// --- Create Main Layout ---
	// Vertical layout: title (fixed height 1), wrapping text (prop 1), status bar (fixed height 1)
	layout := tinytui.NewFlexLayout(tinytui.Vertical).
		AddChild(titleText, 1, 0).    // Fixed height 1
		AddChild(wrappingText, 0, 1). // Proportional height 1
		AddChild(statusBar, 1, 0)     // Add the status bar layout (fixed height 1)

	// --- Set Root and Run ---
	app.SetRoot(layout, true) // Set layout as root, fullscreen

	log.Println("Starting TUI...")
	if err := app.Run(); err != nil {
		log.Fatalf("Error running application: %v", err)
	}

	log.Println("--- Application Stopped ---")
}

// Helper function (optional) to create fixed-width text for status bar
// Not strictly needed if FlexLayout handles sizing well enough with 0,0
func NewStatusBarText(content string, style tinytui.Style) *widgets.Text {
	t := widgets.NewText(content).SetStyle(style)
	// You could potentially add logic here if fixed sizing based on content
	// width is needed more explicitly, but FlexLayout often handles this.
	return t
}
